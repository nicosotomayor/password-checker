import re
import math
import string
import hashlib
import requests
from colorama import Fore, Style, init

# Inicializar colorama
init(autoreset=True)

def calcular_complejidad(password):
    """Eval√∫a longitud, tipos de caracteres y entrop√≠a"""
    longitud = len(password)
    charsets = 0
    if re.search(r'[a-z]', password):  
        charsets += len(string.ascii_lowercase)
    if re.search(r'[A-Z]', password):  
        charsets += len(string.ascii_uppercase)
    if re.search(r'[0-9]', password):  
        charsets += len(string.digits)
    if re.search(r'[^a-zA-Z0-9]', password):  
        charsets += len(string.punctuation)
    
    entropia = longitud * math.log2(charsets) if charsets else 0
    return longitud, charsets, entropia

def tiempo_crack(entropia):
    """Calcula tiempo estimado de crackeo con fuerza bruta (1e9 intentos/segundo)"""
    intentos = 2 ** entropia
    segundos = intentos / 1e9
    minutos, horas = segundos / 60, segundos / 3600
    dias, a√±os = horas / 24, horas / 8760
    
    if a√±os > 1000:
        return "üîê M√°s de 1000 a√±os (irrompible en la pr√°ctica)"
    elif a√±os >= 1:
        return f"‚è≥ ~{a√±os:.2f} a√±os"
    elif dias >= 1:
        return f"‚è≥ ~{dias:.2f} d√≠as"
    elif horas >= 1:
        return f"‚ö†Ô∏è ~{horas:.2f} horas"
    elif minutos >= 1:
        return f"‚ö†Ô∏è ~{minutos:.2f} minutos"
    else:
        return "‚ùå Menos de 1 minuto (muy d√©bil)"

def check_pwned(password):
    """Verifica si la contrase√±a est√° en filtraciones (HaveIBeenPwned API)"""
    sha1 = hashlib.sha1(password.encode("utf-8")).hexdigest().upper()
    prefix, suffix = sha1[:5], sha1[5:]
    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    res = requests.get(url)
    if res.status_code != 200:
        return f"‚ö†Ô∏è Error al consultar la API ({res.status_code})"
    
    hashes = (line.split(':') for line in res.text.splitlines())
    for h, count in hashes:
        if h == suffix:
            return f"‚ö†Ô∏è Esta contrase√±a apareci√≥ en {count} filtraciones. ¬°No la uses!"
    return "‚úÖ No aparece en filtraciones conocidas."

def evaluar_password(password):
    longitud, charsets, entropia = calcular_complejidad(password)
    print(Fore.CYAN + f"\nüîç Evaluando contrase√±a: {password}")
    print(Fore.YELLOW + f"- Longitud: {longitud}")
    print(Fore.YELLOW + f"- Tipos de caracteres usados: {charsets}")
    print(Fore.YELLOW + f"- Entrop√≠a: {entropia:.2f} bits")
    print(Fore.GREEN + f"- Tiempo estimado crackeo: {tiempo_crack(entropia)}")
    print(Fore.RED + f"- Estado filtraciones: {check_pwned(password)}")

if __name__ == "__main__":
    password = input("Introduce una contrase√±a a evaluar: ")
    evaluar_password(password)
